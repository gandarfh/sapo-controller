
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Profile
 */

export type Profile = {
  id: string
  email: string
  firstName: string | null
  lastName: string
  street: string
  numberStreet: number
  neighborhood: string
  city: string
  state: string
  country: string
  zipcode: string
  role: Role[]
  createdAt: Date
}

/**
 * Model User
 */

export type User = {
  id: string
  email: string
  password: string
  createdAt: Date
}

/**
 * Model Kamban
 */

export type Kamban = {
  id: string
  name: string
  userId: string
  createdAt: Date
}

/**
 * Model KambanColumn
 */

export type KambanColumn = {
  id: string
  name: string
  fatherId: string
  order: number
  createdAt: Date
}

/**
 * Model KambanItem
 */

export type KambanItem = {
  id: string
  name: string
  description: string
  order: number
  columnId: string
  tagId: string | null
  createdAt: Date
}

/**
 * Model Tag
 */

export type Tag = {
  id: string
  name: string
  color: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Profiles
 * const profiles = await prisma.profile.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Profiles
   * const profiles = await prisma.profile.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.kamban`: Exposes CRUD operations for the **Kamban** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kambans
    * const kambans = await prisma.kamban.findMany()
    * ```
    */
  get kamban(): Prisma.KambanDelegate<GlobalReject>;

  /**
   * `prisma.kambanColumn`: Exposes CRUD operations for the **KambanColumn** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KambanColumns
    * const kambanColumns = await prisma.kambanColumn.findMany()
    * ```
    */
  get kambanColumn(): Prisma.KambanColumnDelegate<GlobalReject>;

  /**
   * `prisma.kambanItem`: Exposes CRUD operations for the **KambanItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KambanItems
    * const kambanItems = await prisma.kambanItem.findMany()
    * ```
    */
  get kambanItem(): Prisma.KambanItemDelegate<GlobalReject>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.21.2
   * Query Engine version: e421996c87d5f3c8f7eeadd502d4ad402c89464d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Profile: 'Profile',
    User: 'User',
    Kamban: 'Kamban',
    KambanColumn: 'KambanColumn',
    KambanItem: 'KambanItem',
    Tag: 'Tag'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Profile
   */


  export type AggregateProfile = {
    count: ProfileCountAggregateOutputType | null
    avg: ProfileAvgAggregateOutputType | null
    sum: ProfileSumAggregateOutputType | null
    min: ProfileMinAggregateOutputType | null
    max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    numberStreet: number | null
  }

  export type ProfileSumAggregateOutputType = {
    numberStreet: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    street: string | null
    numberStreet: number | null
    neighborhood: string | null
    city: string | null
    state: string | null
    country: string | null
    zipcode: string | null
    createdAt: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    street: string | null
    numberStreet: number | null
    neighborhood: string | null
    city: string | null
    state: string | null
    country: string | null
    zipcode: string | null
    createdAt: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    street: number
    numberStreet: number
    neighborhood: number
    city: number
    state: number
    country: number
    zipcode: number
    role: number
    createdAt: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    numberStreet?: true
  }

  export type ProfileSumAggregateInputType = {
    numberStreet?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    street?: true
    numberStreet?: true
    neighborhood?: true
    city?: true
    state?: true
    country?: true
    zipcode?: true
    createdAt?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    street?: true
    numberStreet?: true
    neighborhood?: true
    city?: true
    state?: true
    country?: true
    zipcode?: true
    createdAt?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    street?: true
    numberStreet?: true
    neighborhood?: true
    city?: true
    state?: true
    country?: true
    zipcode?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
    **/
    orderBy?: Enumerable<ProfileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
    [P in keyof T & keyof AggregateProfile]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }


    
    
  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByInput>
    by: Array<ProfileScalarFieldEnum>
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: ProfileCountAggregateInputType | true
    avg?: ProfileAvgAggregateInputType
    sum?: ProfileSumAggregateInputType
    min?: ProfileMinAggregateInputType
    max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    id: string
    email: string
    firstName: string | null
    lastName: string
    street: string
    numberStreet: number
    neighborhood: string
    city: string
    state: string
    country: string
    zipcode: string
    role: Role[]
    createdAt: Date
    count: ProfileCountAggregateOutputType | null
    avg: ProfileAvgAggregateOutputType | null
    sum: ProfileSumAggregateOutputType | null
    min: ProfileMinAggregateOutputType | null
    max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Promise<Array<
    PickArray<ProfileGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: GetScalarType<T[P], ProfileGroupByOutputType[P]>
    }
  >>
    

  export type ProfileSelect = {
    id?: boolean
    user?: boolean | UserArgs
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    street?: boolean
    numberStreet?: boolean
    neighborhood?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    zipcode?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type ProfileInclude = {
    user?: boolean | UserArgs
  }

  export type ProfileGetPayload<
    S extends boolean | null | undefined | ProfileArgs,
    U = keyof S
      > = S extends true
        ? Profile
    : S extends undefined
    ? never
    : S extends ProfileArgs | ProfileFindManyArgs
    ?'include' extends U
    ? Profile  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Profile ?Profile [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Profile
  : Profile


  type ProfileCountArgs = Merge<
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }
  >

  export interface ProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Profile>>, PrismaPromise<Array<ProfileGetPayload<T>>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs>(
      args?: SelectSubset<T, ProfileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
    **/
    orderBy?: Enumerable<ProfileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
    **/
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
    **/
    orderBy?: Enumerable<ProfileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
    **/
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
    **/
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs = {
    data: Enumerable<ProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
    **/
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
    **/
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
    **/
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: UserCountAggregateInputType | true
    min?: UserMinAggregateInputType
    max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    createdAt: Date
    count: UserCountAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<Array<
    PickArray<UserGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof UserGroupByOutputType))]: GetScalarType<T[P], UserGroupByOutputType[P]>
    }
  >>
    

  export type UserSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    profile?: boolean | ProfileArgs
    kamban?: boolean | KambanFindManyArgs
  }

  export type UserInclude = {
    profile?: boolean | ProfileArgs
    kamban?: boolean | KambanFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'profile'
        ? ProfileGetPayload<S['include'][P]> | null :
        P extends 'kamban'
        ? Array < KambanGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'profile'
        ? ProfileGetPayload<S['select'][P]> | null :
        P extends 'kamban'
        ? Array < KambanGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    kamban<T extends KambanFindManyArgs = {}>(args?: Subset<T, KambanFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Kamban>>, PrismaPromise<Array<KambanGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model Kamban
   */


  export type AggregateKamban = {
    count: KambanCountAggregateOutputType | null
    min: KambanMinAggregateOutputType | null
    max: KambanMaxAggregateOutputType | null
  }

  export type KambanMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type KambanMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type KambanCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    createdAt: number
    _all: number
  }


  export type KambanMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
  }

  export type KambanMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
  }

  export type KambanCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type KambanAggregateArgs = {
    /**
     * Filter which Kamban to aggregate.
    **/
    where?: KambanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kambans to fetch.
    **/
    orderBy?: Enumerable<KambanOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: KambanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kambans from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kambans.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kambans
    **/
    count?: true | KambanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: KambanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: KambanMaxAggregateInputType
  }

  export type GetKambanAggregateType<T extends KambanAggregateArgs> = {
    [P in keyof T & keyof AggregateKamban]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKamban[P]>
      : GetScalarType<T[P], AggregateKamban[P]>
  }


    
    
  export type KambanGroupByArgs = {
    where?: KambanWhereInput
    orderBy?: Enumerable<KambanOrderByInput>
    by: Array<KambanScalarFieldEnum>
    having?: KambanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: KambanCountAggregateInputType | true
    min?: KambanMinAggregateInputType
    max?: KambanMaxAggregateInputType
  }


  export type KambanGroupByOutputType = {
    id: string
    name: string
    userId: string
    createdAt: Date
    count: KambanCountAggregateOutputType | null
    min: KambanMinAggregateOutputType | null
    max: KambanMaxAggregateOutputType | null
  }

  type GetKambanGroupByPayload<T extends KambanGroupByArgs> = Promise<Array<
    PickArray<KambanGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof KambanGroupByOutputType))]: GetScalarType<T[P], KambanGroupByOutputType[P]>
    }
  >>
    

  export type KambanSelect = {
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    columns?: boolean | KambanColumnFindManyArgs
    createdAt?: boolean
  }

  export type KambanInclude = {
    user?: boolean | UserArgs
    columns?: boolean | KambanColumnFindManyArgs
  }

  export type KambanGetPayload<
    S extends boolean | null | undefined | KambanArgs,
    U = keyof S
      > = S extends true
        ? Kamban
    : S extends undefined
    ? never
    : S extends KambanArgs | KambanFindManyArgs
    ?'include' extends U
    ? Kamban  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'columns'
        ? Array < KambanColumnGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Kamban ?Kamban [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'columns'
        ? Array < KambanColumnGetPayload<S['select'][P]>>  : never
  } 
    : Kamban
  : Kamban


  type KambanCountArgs = Merge<
    Omit<KambanFindManyArgs, 'select' | 'include'> & {
      select?: KambanCountAggregateInputType | true
    }
  >

  export interface KambanDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Kamban that matches the filter.
     * @param {KambanFindUniqueArgs} args - Arguments to find a Kamban
     * @example
     * // Get one Kamban
     * const kamban = await prisma.kamban.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KambanFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KambanFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Kamban'> extends True ? CheckSelect<T, Prisma__KambanClient<Kamban>, Prisma__KambanClient<KambanGetPayload<T>>> : CheckSelect<T, Prisma__KambanClient<Kamban | null >, Prisma__KambanClient<KambanGetPayload<T> | null >>

    /**
     * Find the first Kamban that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanFindFirstArgs} args - Arguments to find a Kamban
     * @example
     * // Get one Kamban
     * const kamban = await prisma.kamban.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KambanFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KambanFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Kamban'> extends True ? CheckSelect<T, Prisma__KambanClient<Kamban>, Prisma__KambanClient<KambanGetPayload<T>>> : CheckSelect<T, Prisma__KambanClient<Kamban | null >, Prisma__KambanClient<KambanGetPayload<T> | null >>

    /**
     * Find zero or more Kambans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kambans
     * const kambans = await prisma.kamban.findMany()
     * 
     * // Get first 10 Kambans
     * const kambans = await prisma.kamban.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kambanWithIdOnly = await prisma.kamban.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KambanFindManyArgs>(
      args?: SelectSubset<T, KambanFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Kamban>>, PrismaPromise<Array<KambanGetPayload<T>>>>

    /**
     * Create a Kamban.
     * @param {KambanCreateArgs} args - Arguments to create a Kamban.
     * @example
     * // Create one Kamban
     * const Kamban = await prisma.kamban.create({
     *   data: {
     *     // ... data to create a Kamban
     *   }
     * })
     * 
    **/
    create<T extends KambanCreateArgs>(
      args: SelectSubset<T, KambanCreateArgs>
    ): CheckSelect<T, Prisma__KambanClient<Kamban>, Prisma__KambanClient<KambanGetPayload<T>>>

    /**
     * Create many Kambans.
     *     @param {KambanCreateManyArgs} args - Arguments to create many Kambans.
     *     @example
     *     // Create many Kambans
     *     const kamban = await prisma.kamban.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KambanCreateManyArgs>(
      args?: SelectSubset<T, KambanCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Kamban.
     * @param {KambanDeleteArgs} args - Arguments to delete one Kamban.
     * @example
     * // Delete one Kamban
     * const Kamban = await prisma.kamban.delete({
     *   where: {
     *     // ... filter to delete one Kamban
     *   }
     * })
     * 
    **/
    delete<T extends KambanDeleteArgs>(
      args: SelectSubset<T, KambanDeleteArgs>
    ): CheckSelect<T, Prisma__KambanClient<Kamban>, Prisma__KambanClient<KambanGetPayload<T>>>

    /**
     * Update one Kamban.
     * @param {KambanUpdateArgs} args - Arguments to update one Kamban.
     * @example
     * // Update one Kamban
     * const kamban = await prisma.kamban.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KambanUpdateArgs>(
      args: SelectSubset<T, KambanUpdateArgs>
    ): CheckSelect<T, Prisma__KambanClient<Kamban>, Prisma__KambanClient<KambanGetPayload<T>>>

    /**
     * Delete zero or more Kambans.
     * @param {KambanDeleteManyArgs} args - Arguments to filter Kambans to delete.
     * @example
     * // Delete a few Kambans
     * const { count } = await prisma.kamban.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KambanDeleteManyArgs>(
      args?: SelectSubset<T, KambanDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kambans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kambans
     * const kamban = await prisma.kamban.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KambanUpdateManyArgs>(
      args: SelectSubset<T, KambanUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Kamban.
     * @param {KambanUpsertArgs} args - Arguments to update or create a Kamban.
     * @example
     * // Update or create a Kamban
     * const kamban = await prisma.kamban.upsert({
     *   create: {
     *     // ... data to create a Kamban
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kamban we want to update
     *   }
     * })
    **/
    upsert<T extends KambanUpsertArgs>(
      args: SelectSubset<T, KambanUpsertArgs>
    ): CheckSelect<T, Prisma__KambanClient<Kamban>, Prisma__KambanClient<KambanGetPayload<T>>>

    /**
     * Count the number of Kambans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanCountArgs} args - Arguments to filter Kambans to count.
     * @example
     * // Count the number of Kambans
     * const count = await prisma.kamban.count({
     *   where: {
     *     // ... the filter for the Kambans we want to count
     *   }
     * })
    **/
    count<T extends KambanCountArgs>(
      args?: Subset<T, KambanCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KambanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kamban.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KambanAggregateArgs>(args: Subset<T, KambanAggregateArgs>): PrismaPromise<GetKambanAggregateType<T>>

    /**
     * Group by Kamban.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KambanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KambanGroupByArgs['orderBy'] }
        : { orderBy?: KambanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KambanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKambanGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kamban.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KambanClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    columns<T extends KambanColumnFindManyArgs = {}>(args?: Subset<T, KambanColumnFindManyArgs>): CheckSelect<T, PrismaPromise<Array<KambanColumn>>, PrismaPromise<Array<KambanColumnGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Kamban findUnique
   */
  export type KambanFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Kamban
    **/
    select?: KambanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanInclude | null
    /**
     * Throw an Error if a Kamban can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Kamban to fetch.
    **/
    where: KambanWhereUniqueInput
  }


  /**
   * Kamban findFirst
   */
  export type KambanFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Kamban
    **/
    select?: KambanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanInclude | null
    /**
     * Throw an Error if a Kamban can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Kamban to fetch.
    **/
    where?: KambanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kambans to fetch.
    **/
    orderBy?: Enumerable<KambanOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kambans.
    **/
    cursor?: KambanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kambans from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kambans.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kambans.
    **/
    distinct?: Enumerable<KambanScalarFieldEnum>
  }


  /**
   * Kamban findMany
   */
  export type KambanFindManyArgs = {
    /**
     * Select specific fields to fetch from the Kamban
    **/
    select?: KambanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanInclude | null
    /**
     * Filter, which Kambans to fetch.
    **/
    where?: KambanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kambans to fetch.
    **/
    orderBy?: Enumerable<KambanOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kambans.
    **/
    cursor?: KambanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kambans from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kambans.
    **/
    skip?: number
    distinct?: Enumerable<KambanScalarFieldEnum>
  }


  /**
   * Kamban create
   */
  export type KambanCreateArgs = {
    /**
     * Select specific fields to fetch from the Kamban
    **/
    select?: KambanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanInclude | null
    /**
     * The data needed to create a Kamban.
    **/
    data: XOR<KambanCreateInput, KambanUncheckedCreateInput>
  }


  /**
   * Kamban createMany
   */
  export type KambanCreateManyArgs = {
    data: Enumerable<KambanCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Kamban update
   */
  export type KambanUpdateArgs = {
    /**
     * Select specific fields to fetch from the Kamban
    **/
    select?: KambanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanInclude | null
    /**
     * The data needed to update a Kamban.
    **/
    data: XOR<KambanUpdateInput, KambanUncheckedUpdateInput>
    /**
     * Choose, which Kamban to update.
    **/
    where: KambanWhereUniqueInput
  }


  /**
   * Kamban updateMany
   */
  export type KambanUpdateManyArgs = {
    data: XOR<KambanUpdateManyMutationInput, KambanUncheckedUpdateManyInput>
    where?: KambanWhereInput
  }


  /**
   * Kamban upsert
   */
  export type KambanUpsertArgs = {
    /**
     * Select specific fields to fetch from the Kamban
    **/
    select?: KambanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanInclude | null
    /**
     * The filter to search for the Kamban to update in case it exists.
    **/
    where: KambanWhereUniqueInput
    /**
     * In case the Kamban found by the `where` argument doesn't exist, create a new Kamban with this data.
    **/
    create: XOR<KambanCreateInput, KambanUncheckedCreateInput>
    /**
     * In case the Kamban was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<KambanUpdateInput, KambanUncheckedUpdateInput>
  }


  /**
   * Kamban delete
   */
  export type KambanDeleteArgs = {
    /**
     * Select specific fields to fetch from the Kamban
    **/
    select?: KambanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanInclude | null
    /**
     * Filter which Kamban to delete.
    **/
    where: KambanWhereUniqueInput
  }


  /**
   * Kamban deleteMany
   */
  export type KambanDeleteManyArgs = {
    where?: KambanWhereInput
  }


  /**
   * Kamban without action
   */
  export type KambanArgs = {
    /**
     * Select specific fields to fetch from the Kamban
    **/
    select?: KambanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanInclude | null
  }



  /**
   * Model KambanColumn
   */


  export type AggregateKambanColumn = {
    count: KambanColumnCountAggregateOutputType | null
    avg: KambanColumnAvgAggregateOutputType | null
    sum: KambanColumnSumAggregateOutputType | null
    min: KambanColumnMinAggregateOutputType | null
    max: KambanColumnMaxAggregateOutputType | null
  }

  export type KambanColumnAvgAggregateOutputType = {
    order: number | null
  }

  export type KambanColumnSumAggregateOutputType = {
    order: number | null
  }

  export type KambanColumnMinAggregateOutputType = {
    id: string | null
    name: string | null
    fatherId: string | null
    order: number | null
    createdAt: Date | null
  }

  export type KambanColumnMaxAggregateOutputType = {
    id: string | null
    name: string | null
    fatherId: string | null
    order: number | null
    createdAt: Date | null
  }

  export type KambanColumnCountAggregateOutputType = {
    id: number
    name: number
    fatherId: number
    order: number
    createdAt: number
    _all: number
  }


  export type KambanColumnAvgAggregateInputType = {
    order?: true
  }

  export type KambanColumnSumAggregateInputType = {
    order?: true
  }

  export type KambanColumnMinAggregateInputType = {
    id?: true
    name?: true
    fatherId?: true
    order?: true
    createdAt?: true
  }

  export type KambanColumnMaxAggregateInputType = {
    id?: true
    name?: true
    fatherId?: true
    order?: true
    createdAt?: true
  }

  export type KambanColumnCountAggregateInputType = {
    id?: true
    name?: true
    fatherId?: true
    order?: true
    createdAt?: true
    _all?: true
  }

  export type KambanColumnAggregateArgs = {
    /**
     * Filter which KambanColumn to aggregate.
    **/
    where?: KambanColumnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KambanColumns to fetch.
    **/
    orderBy?: Enumerable<KambanColumnOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: KambanColumnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KambanColumns from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KambanColumns.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KambanColumns
    **/
    count?: true | KambanColumnCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: KambanColumnAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: KambanColumnSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: KambanColumnMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: KambanColumnMaxAggregateInputType
  }

  export type GetKambanColumnAggregateType<T extends KambanColumnAggregateArgs> = {
    [P in keyof T & keyof AggregateKambanColumn]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKambanColumn[P]>
      : GetScalarType<T[P], AggregateKambanColumn[P]>
  }


    
    
  export type KambanColumnGroupByArgs = {
    where?: KambanColumnWhereInput
    orderBy?: Enumerable<KambanColumnOrderByInput>
    by: Array<KambanColumnScalarFieldEnum>
    having?: KambanColumnScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: KambanColumnCountAggregateInputType | true
    avg?: KambanColumnAvgAggregateInputType
    sum?: KambanColumnSumAggregateInputType
    min?: KambanColumnMinAggregateInputType
    max?: KambanColumnMaxAggregateInputType
  }


  export type KambanColumnGroupByOutputType = {
    id: string
    name: string
    fatherId: string
    order: number
    createdAt: Date
    count: KambanColumnCountAggregateOutputType | null
    avg: KambanColumnAvgAggregateOutputType | null
    sum: KambanColumnSumAggregateOutputType | null
    min: KambanColumnMinAggregateOutputType | null
    max: KambanColumnMaxAggregateOutputType | null
  }

  type GetKambanColumnGroupByPayload<T extends KambanColumnGroupByArgs> = Promise<Array<
    PickArray<KambanColumnGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof KambanColumnGroupByOutputType))]: GetScalarType<T[P], KambanColumnGroupByOutputType[P]>
    }
  >>
    

  export type KambanColumnSelect = {
    id?: boolean
    name?: boolean
    KambanFather?: boolean | KambanArgs
    fatherId?: boolean
    order?: boolean
    items?: boolean | KambanItemFindManyArgs
    createdAt?: boolean
  }

  export type KambanColumnInclude = {
    KambanFather?: boolean | KambanArgs
    items?: boolean | KambanItemFindManyArgs
  }

  export type KambanColumnGetPayload<
    S extends boolean | null | undefined | KambanColumnArgs,
    U = keyof S
      > = S extends true
        ? KambanColumn
    : S extends undefined
    ? never
    : S extends KambanColumnArgs | KambanColumnFindManyArgs
    ?'include' extends U
    ? KambanColumn  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'KambanFather'
        ? KambanGetPayload<S['include'][P]> :
        P extends 'items'
        ? Array < KambanItemGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof KambanColumn ?KambanColumn [P]
  : 
          P extends 'KambanFather'
        ? KambanGetPayload<S['select'][P]> :
        P extends 'items'
        ? Array < KambanItemGetPayload<S['select'][P]>>  : never
  } 
    : KambanColumn
  : KambanColumn


  type KambanColumnCountArgs = Merge<
    Omit<KambanColumnFindManyArgs, 'select' | 'include'> & {
      select?: KambanColumnCountAggregateInputType | true
    }
  >

  export interface KambanColumnDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one KambanColumn that matches the filter.
     * @param {KambanColumnFindUniqueArgs} args - Arguments to find a KambanColumn
     * @example
     * // Get one KambanColumn
     * const kambanColumn = await prisma.kambanColumn.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KambanColumnFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KambanColumnFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'KambanColumn'> extends True ? CheckSelect<T, Prisma__KambanColumnClient<KambanColumn>, Prisma__KambanColumnClient<KambanColumnGetPayload<T>>> : CheckSelect<T, Prisma__KambanColumnClient<KambanColumn | null >, Prisma__KambanColumnClient<KambanColumnGetPayload<T> | null >>

    /**
     * Find the first KambanColumn that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanColumnFindFirstArgs} args - Arguments to find a KambanColumn
     * @example
     * // Get one KambanColumn
     * const kambanColumn = await prisma.kambanColumn.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KambanColumnFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KambanColumnFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'KambanColumn'> extends True ? CheckSelect<T, Prisma__KambanColumnClient<KambanColumn>, Prisma__KambanColumnClient<KambanColumnGetPayload<T>>> : CheckSelect<T, Prisma__KambanColumnClient<KambanColumn | null >, Prisma__KambanColumnClient<KambanColumnGetPayload<T> | null >>

    /**
     * Find zero or more KambanColumns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanColumnFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KambanColumns
     * const kambanColumns = await prisma.kambanColumn.findMany()
     * 
     * // Get first 10 KambanColumns
     * const kambanColumns = await prisma.kambanColumn.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kambanColumnWithIdOnly = await prisma.kambanColumn.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KambanColumnFindManyArgs>(
      args?: SelectSubset<T, KambanColumnFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<KambanColumn>>, PrismaPromise<Array<KambanColumnGetPayload<T>>>>

    /**
     * Create a KambanColumn.
     * @param {KambanColumnCreateArgs} args - Arguments to create a KambanColumn.
     * @example
     * // Create one KambanColumn
     * const KambanColumn = await prisma.kambanColumn.create({
     *   data: {
     *     // ... data to create a KambanColumn
     *   }
     * })
     * 
    **/
    create<T extends KambanColumnCreateArgs>(
      args: SelectSubset<T, KambanColumnCreateArgs>
    ): CheckSelect<T, Prisma__KambanColumnClient<KambanColumn>, Prisma__KambanColumnClient<KambanColumnGetPayload<T>>>

    /**
     * Create many KambanColumns.
     *     @param {KambanColumnCreateManyArgs} args - Arguments to create many KambanColumns.
     *     @example
     *     // Create many KambanColumns
     *     const kambanColumn = await prisma.kambanColumn.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KambanColumnCreateManyArgs>(
      args?: SelectSubset<T, KambanColumnCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a KambanColumn.
     * @param {KambanColumnDeleteArgs} args - Arguments to delete one KambanColumn.
     * @example
     * // Delete one KambanColumn
     * const KambanColumn = await prisma.kambanColumn.delete({
     *   where: {
     *     // ... filter to delete one KambanColumn
     *   }
     * })
     * 
    **/
    delete<T extends KambanColumnDeleteArgs>(
      args: SelectSubset<T, KambanColumnDeleteArgs>
    ): CheckSelect<T, Prisma__KambanColumnClient<KambanColumn>, Prisma__KambanColumnClient<KambanColumnGetPayload<T>>>

    /**
     * Update one KambanColumn.
     * @param {KambanColumnUpdateArgs} args - Arguments to update one KambanColumn.
     * @example
     * // Update one KambanColumn
     * const kambanColumn = await prisma.kambanColumn.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KambanColumnUpdateArgs>(
      args: SelectSubset<T, KambanColumnUpdateArgs>
    ): CheckSelect<T, Prisma__KambanColumnClient<KambanColumn>, Prisma__KambanColumnClient<KambanColumnGetPayload<T>>>

    /**
     * Delete zero or more KambanColumns.
     * @param {KambanColumnDeleteManyArgs} args - Arguments to filter KambanColumns to delete.
     * @example
     * // Delete a few KambanColumns
     * const { count } = await prisma.kambanColumn.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KambanColumnDeleteManyArgs>(
      args?: SelectSubset<T, KambanColumnDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more KambanColumns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanColumnUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KambanColumns
     * const kambanColumn = await prisma.kambanColumn.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KambanColumnUpdateManyArgs>(
      args: SelectSubset<T, KambanColumnUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one KambanColumn.
     * @param {KambanColumnUpsertArgs} args - Arguments to update or create a KambanColumn.
     * @example
     * // Update or create a KambanColumn
     * const kambanColumn = await prisma.kambanColumn.upsert({
     *   create: {
     *     // ... data to create a KambanColumn
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KambanColumn we want to update
     *   }
     * })
    **/
    upsert<T extends KambanColumnUpsertArgs>(
      args: SelectSubset<T, KambanColumnUpsertArgs>
    ): CheckSelect<T, Prisma__KambanColumnClient<KambanColumn>, Prisma__KambanColumnClient<KambanColumnGetPayload<T>>>

    /**
     * Count the number of KambanColumns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanColumnCountArgs} args - Arguments to filter KambanColumns to count.
     * @example
     * // Count the number of KambanColumns
     * const count = await prisma.kambanColumn.count({
     *   where: {
     *     // ... the filter for the KambanColumns we want to count
     *   }
     * })
    **/
    count<T extends KambanColumnCountArgs>(
      args?: Subset<T, KambanColumnCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KambanColumnCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KambanColumn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanColumnAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KambanColumnAggregateArgs>(args: Subset<T, KambanColumnAggregateArgs>): PrismaPromise<GetKambanColumnAggregateType<T>>

    /**
     * Group by KambanColumn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanColumnGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KambanColumnGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KambanColumnGroupByArgs['orderBy'] }
        : { orderBy?: KambanColumnGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KambanColumnGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKambanColumnGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for KambanColumn.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KambanColumnClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    KambanFather<T extends KambanArgs = {}>(args?: Subset<T, KambanArgs>): CheckSelect<T, Prisma__KambanClient<Kamban | null >, Prisma__KambanClient<KambanGetPayload<T> | null >>;

    items<T extends KambanItemFindManyArgs = {}>(args?: Subset<T, KambanItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<KambanItem>>, PrismaPromise<Array<KambanItemGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * KambanColumn findUnique
   */
  export type KambanColumnFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the KambanColumn
    **/
    select?: KambanColumnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanColumnInclude | null
    /**
     * Throw an Error if a KambanColumn can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which KambanColumn to fetch.
    **/
    where: KambanColumnWhereUniqueInput
  }


  /**
   * KambanColumn findFirst
   */
  export type KambanColumnFindFirstArgs = {
    /**
     * Select specific fields to fetch from the KambanColumn
    **/
    select?: KambanColumnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanColumnInclude | null
    /**
     * Throw an Error if a KambanColumn can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which KambanColumn to fetch.
    **/
    where?: KambanColumnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KambanColumns to fetch.
    **/
    orderBy?: Enumerable<KambanColumnOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KambanColumns.
    **/
    cursor?: KambanColumnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KambanColumns from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KambanColumns.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KambanColumns.
    **/
    distinct?: Enumerable<KambanColumnScalarFieldEnum>
  }


  /**
   * KambanColumn findMany
   */
  export type KambanColumnFindManyArgs = {
    /**
     * Select specific fields to fetch from the KambanColumn
    **/
    select?: KambanColumnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanColumnInclude | null
    /**
     * Filter, which KambanColumns to fetch.
    **/
    where?: KambanColumnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KambanColumns to fetch.
    **/
    orderBy?: Enumerable<KambanColumnOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KambanColumns.
    **/
    cursor?: KambanColumnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KambanColumns from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KambanColumns.
    **/
    skip?: number
    distinct?: Enumerable<KambanColumnScalarFieldEnum>
  }


  /**
   * KambanColumn create
   */
  export type KambanColumnCreateArgs = {
    /**
     * Select specific fields to fetch from the KambanColumn
    **/
    select?: KambanColumnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanColumnInclude | null
    /**
     * The data needed to create a KambanColumn.
    **/
    data: XOR<KambanColumnCreateInput, KambanColumnUncheckedCreateInput>
  }


  /**
   * KambanColumn createMany
   */
  export type KambanColumnCreateManyArgs = {
    data: Enumerable<KambanColumnCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * KambanColumn update
   */
  export type KambanColumnUpdateArgs = {
    /**
     * Select specific fields to fetch from the KambanColumn
    **/
    select?: KambanColumnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanColumnInclude | null
    /**
     * The data needed to update a KambanColumn.
    **/
    data: XOR<KambanColumnUpdateInput, KambanColumnUncheckedUpdateInput>
    /**
     * Choose, which KambanColumn to update.
    **/
    where: KambanColumnWhereUniqueInput
  }


  /**
   * KambanColumn updateMany
   */
  export type KambanColumnUpdateManyArgs = {
    data: XOR<KambanColumnUpdateManyMutationInput, KambanColumnUncheckedUpdateManyInput>
    where?: KambanColumnWhereInput
  }


  /**
   * KambanColumn upsert
   */
  export type KambanColumnUpsertArgs = {
    /**
     * Select specific fields to fetch from the KambanColumn
    **/
    select?: KambanColumnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanColumnInclude | null
    /**
     * The filter to search for the KambanColumn to update in case it exists.
    **/
    where: KambanColumnWhereUniqueInput
    /**
     * In case the KambanColumn found by the `where` argument doesn't exist, create a new KambanColumn with this data.
    **/
    create: XOR<KambanColumnCreateInput, KambanColumnUncheckedCreateInput>
    /**
     * In case the KambanColumn was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<KambanColumnUpdateInput, KambanColumnUncheckedUpdateInput>
  }


  /**
   * KambanColumn delete
   */
  export type KambanColumnDeleteArgs = {
    /**
     * Select specific fields to fetch from the KambanColumn
    **/
    select?: KambanColumnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanColumnInclude | null
    /**
     * Filter which KambanColumn to delete.
    **/
    where: KambanColumnWhereUniqueInput
  }


  /**
   * KambanColumn deleteMany
   */
  export type KambanColumnDeleteManyArgs = {
    where?: KambanColumnWhereInput
  }


  /**
   * KambanColumn without action
   */
  export type KambanColumnArgs = {
    /**
     * Select specific fields to fetch from the KambanColumn
    **/
    select?: KambanColumnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanColumnInclude | null
  }



  /**
   * Model KambanItem
   */


  export type AggregateKambanItem = {
    count: KambanItemCountAggregateOutputType | null
    avg: KambanItemAvgAggregateOutputType | null
    sum: KambanItemSumAggregateOutputType | null
    min: KambanItemMinAggregateOutputType | null
    max: KambanItemMaxAggregateOutputType | null
  }

  export type KambanItemAvgAggregateOutputType = {
    order: number | null
  }

  export type KambanItemSumAggregateOutputType = {
    order: number | null
  }

  export type KambanItemMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    order: number | null
    columnId: string | null
    tagId: string | null
    createdAt: Date | null
  }

  export type KambanItemMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    order: number | null
    columnId: string | null
    tagId: string | null
    createdAt: Date | null
  }

  export type KambanItemCountAggregateOutputType = {
    id: number
    name: number
    description: number
    order: number
    columnId: number
    tagId: number
    createdAt: number
    _all: number
  }


  export type KambanItemAvgAggregateInputType = {
    order?: true
  }

  export type KambanItemSumAggregateInputType = {
    order?: true
  }

  export type KambanItemMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    order?: true
    columnId?: true
    tagId?: true
    createdAt?: true
  }

  export type KambanItemMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    order?: true
    columnId?: true
    tagId?: true
    createdAt?: true
  }

  export type KambanItemCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    order?: true
    columnId?: true
    tagId?: true
    createdAt?: true
    _all?: true
  }

  export type KambanItemAggregateArgs = {
    /**
     * Filter which KambanItem to aggregate.
    **/
    where?: KambanItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KambanItems to fetch.
    **/
    orderBy?: Enumerable<KambanItemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: KambanItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KambanItems from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KambanItems.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KambanItems
    **/
    count?: true | KambanItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: KambanItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: KambanItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: KambanItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: KambanItemMaxAggregateInputType
  }

  export type GetKambanItemAggregateType<T extends KambanItemAggregateArgs> = {
    [P in keyof T & keyof AggregateKambanItem]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKambanItem[P]>
      : GetScalarType<T[P], AggregateKambanItem[P]>
  }


    
    
  export type KambanItemGroupByArgs = {
    where?: KambanItemWhereInput
    orderBy?: Enumerable<KambanItemOrderByInput>
    by: Array<KambanItemScalarFieldEnum>
    having?: KambanItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: KambanItemCountAggregateInputType | true
    avg?: KambanItemAvgAggregateInputType
    sum?: KambanItemSumAggregateInputType
    min?: KambanItemMinAggregateInputType
    max?: KambanItemMaxAggregateInputType
  }


  export type KambanItemGroupByOutputType = {
    id: string
    name: string
    description: string
    order: number
    columnId: string
    tagId: string | null
    createdAt: Date
    count: KambanItemCountAggregateOutputType | null
    avg: KambanItemAvgAggregateOutputType | null
    sum: KambanItemSumAggregateOutputType | null
    min: KambanItemMinAggregateOutputType | null
    max: KambanItemMaxAggregateOutputType | null
  }

  type GetKambanItemGroupByPayload<T extends KambanItemGroupByArgs> = Promise<Array<
    PickArray<KambanItemGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof KambanItemGroupByOutputType))]: GetScalarType<T[P], KambanItemGroupByOutputType[P]>
    }
  >>
    

  export type KambanItemSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    column?: boolean | KambanColumnArgs
    columnId?: boolean
    tagId?: boolean
    tag?: boolean | TagArgs
    createdAt?: boolean
  }

  export type KambanItemInclude = {
    column?: boolean | KambanColumnArgs
    tag?: boolean | TagArgs
  }

  export type KambanItemGetPayload<
    S extends boolean | null | undefined | KambanItemArgs,
    U = keyof S
      > = S extends true
        ? KambanItem
    : S extends undefined
    ? never
    : S extends KambanItemArgs | KambanItemFindManyArgs
    ?'include' extends U
    ? KambanItem  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'column'
        ? KambanColumnGetPayload<S['include'][P]> :
        P extends 'tag'
        ? TagGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof KambanItem ?KambanItem [P]
  : 
          P extends 'column'
        ? KambanColumnGetPayload<S['select'][P]> :
        P extends 'tag'
        ? TagGetPayload<S['select'][P]> | null : never
  } 
    : KambanItem
  : KambanItem


  type KambanItemCountArgs = Merge<
    Omit<KambanItemFindManyArgs, 'select' | 'include'> & {
      select?: KambanItemCountAggregateInputType | true
    }
  >

  export interface KambanItemDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one KambanItem that matches the filter.
     * @param {KambanItemFindUniqueArgs} args - Arguments to find a KambanItem
     * @example
     * // Get one KambanItem
     * const kambanItem = await prisma.kambanItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KambanItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KambanItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'KambanItem'> extends True ? CheckSelect<T, Prisma__KambanItemClient<KambanItem>, Prisma__KambanItemClient<KambanItemGetPayload<T>>> : CheckSelect<T, Prisma__KambanItemClient<KambanItem | null >, Prisma__KambanItemClient<KambanItemGetPayload<T> | null >>

    /**
     * Find the first KambanItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanItemFindFirstArgs} args - Arguments to find a KambanItem
     * @example
     * // Get one KambanItem
     * const kambanItem = await prisma.kambanItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KambanItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KambanItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'KambanItem'> extends True ? CheckSelect<T, Prisma__KambanItemClient<KambanItem>, Prisma__KambanItemClient<KambanItemGetPayload<T>>> : CheckSelect<T, Prisma__KambanItemClient<KambanItem | null >, Prisma__KambanItemClient<KambanItemGetPayload<T> | null >>

    /**
     * Find zero or more KambanItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KambanItems
     * const kambanItems = await prisma.kambanItem.findMany()
     * 
     * // Get first 10 KambanItems
     * const kambanItems = await prisma.kambanItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kambanItemWithIdOnly = await prisma.kambanItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KambanItemFindManyArgs>(
      args?: SelectSubset<T, KambanItemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<KambanItem>>, PrismaPromise<Array<KambanItemGetPayload<T>>>>

    /**
     * Create a KambanItem.
     * @param {KambanItemCreateArgs} args - Arguments to create a KambanItem.
     * @example
     * // Create one KambanItem
     * const KambanItem = await prisma.kambanItem.create({
     *   data: {
     *     // ... data to create a KambanItem
     *   }
     * })
     * 
    **/
    create<T extends KambanItemCreateArgs>(
      args: SelectSubset<T, KambanItemCreateArgs>
    ): CheckSelect<T, Prisma__KambanItemClient<KambanItem>, Prisma__KambanItemClient<KambanItemGetPayload<T>>>

    /**
     * Create many KambanItems.
     *     @param {KambanItemCreateManyArgs} args - Arguments to create many KambanItems.
     *     @example
     *     // Create many KambanItems
     *     const kambanItem = await prisma.kambanItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KambanItemCreateManyArgs>(
      args?: SelectSubset<T, KambanItemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a KambanItem.
     * @param {KambanItemDeleteArgs} args - Arguments to delete one KambanItem.
     * @example
     * // Delete one KambanItem
     * const KambanItem = await prisma.kambanItem.delete({
     *   where: {
     *     // ... filter to delete one KambanItem
     *   }
     * })
     * 
    **/
    delete<T extends KambanItemDeleteArgs>(
      args: SelectSubset<T, KambanItemDeleteArgs>
    ): CheckSelect<T, Prisma__KambanItemClient<KambanItem>, Prisma__KambanItemClient<KambanItemGetPayload<T>>>

    /**
     * Update one KambanItem.
     * @param {KambanItemUpdateArgs} args - Arguments to update one KambanItem.
     * @example
     * // Update one KambanItem
     * const kambanItem = await prisma.kambanItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KambanItemUpdateArgs>(
      args: SelectSubset<T, KambanItemUpdateArgs>
    ): CheckSelect<T, Prisma__KambanItemClient<KambanItem>, Prisma__KambanItemClient<KambanItemGetPayload<T>>>

    /**
     * Delete zero or more KambanItems.
     * @param {KambanItemDeleteManyArgs} args - Arguments to filter KambanItems to delete.
     * @example
     * // Delete a few KambanItems
     * const { count } = await prisma.kambanItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KambanItemDeleteManyArgs>(
      args?: SelectSubset<T, KambanItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more KambanItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KambanItems
     * const kambanItem = await prisma.kambanItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KambanItemUpdateManyArgs>(
      args: SelectSubset<T, KambanItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one KambanItem.
     * @param {KambanItemUpsertArgs} args - Arguments to update or create a KambanItem.
     * @example
     * // Update or create a KambanItem
     * const kambanItem = await prisma.kambanItem.upsert({
     *   create: {
     *     // ... data to create a KambanItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KambanItem we want to update
     *   }
     * })
    **/
    upsert<T extends KambanItemUpsertArgs>(
      args: SelectSubset<T, KambanItemUpsertArgs>
    ): CheckSelect<T, Prisma__KambanItemClient<KambanItem>, Prisma__KambanItemClient<KambanItemGetPayload<T>>>

    /**
     * Count the number of KambanItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanItemCountArgs} args - Arguments to filter KambanItems to count.
     * @example
     * // Count the number of KambanItems
     * const count = await prisma.kambanItem.count({
     *   where: {
     *     // ... the filter for the KambanItems we want to count
     *   }
     * })
    **/
    count<T extends KambanItemCountArgs>(
      args?: Subset<T, KambanItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KambanItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KambanItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KambanItemAggregateArgs>(args: Subset<T, KambanItemAggregateArgs>): PrismaPromise<GetKambanItemAggregateType<T>>

    /**
     * Group by KambanItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KambanItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KambanItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KambanItemGroupByArgs['orderBy'] }
        : { orderBy?: KambanItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KambanItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKambanItemGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for KambanItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KambanItemClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    column<T extends KambanColumnArgs = {}>(args?: Subset<T, KambanColumnArgs>): CheckSelect<T, Prisma__KambanColumnClient<KambanColumn | null >, Prisma__KambanColumnClient<KambanColumnGetPayload<T> | null >>;

    tag<T extends TagArgs = {}>(args?: Subset<T, TagArgs>): CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * KambanItem findUnique
   */
  export type KambanItemFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the KambanItem
    **/
    select?: KambanItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanItemInclude | null
    /**
     * Throw an Error if a KambanItem can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which KambanItem to fetch.
    **/
    where: KambanItemWhereUniqueInput
  }


  /**
   * KambanItem findFirst
   */
  export type KambanItemFindFirstArgs = {
    /**
     * Select specific fields to fetch from the KambanItem
    **/
    select?: KambanItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanItemInclude | null
    /**
     * Throw an Error if a KambanItem can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which KambanItem to fetch.
    **/
    where?: KambanItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KambanItems to fetch.
    **/
    orderBy?: Enumerable<KambanItemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KambanItems.
    **/
    cursor?: KambanItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KambanItems from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KambanItems.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KambanItems.
    **/
    distinct?: Enumerable<KambanItemScalarFieldEnum>
  }


  /**
   * KambanItem findMany
   */
  export type KambanItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the KambanItem
    **/
    select?: KambanItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanItemInclude | null
    /**
     * Filter, which KambanItems to fetch.
    **/
    where?: KambanItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KambanItems to fetch.
    **/
    orderBy?: Enumerable<KambanItemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KambanItems.
    **/
    cursor?: KambanItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KambanItems from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KambanItems.
    **/
    skip?: number
    distinct?: Enumerable<KambanItemScalarFieldEnum>
  }


  /**
   * KambanItem create
   */
  export type KambanItemCreateArgs = {
    /**
     * Select specific fields to fetch from the KambanItem
    **/
    select?: KambanItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanItemInclude | null
    /**
     * The data needed to create a KambanItem.
    **/
    data: XOR<KambanItemCreateInput, KambanItemUncheckedCreateInput>
  }


  /**
   * KambanItem createMany
   */
  export type KambanItemCreateManyArgs = {
    data: Enumerable<KambanItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * KambanItem update
   */
  export type KambanItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the KambanItem
    **/
    select?: KambanItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanItemInclude | null
    /**
     * The data needed to update a KambanItem.
    **/
    data: XOR<KambanItemUpdateInput, KambanItemUncheckedUpdateInput>
    /**
     * Choose, which KambanItem to update.
    **/
    where: KambanItemWhereUniqueInput
  }


  /**
   * KambanItem updateMany
   */
  export type KambanItemUpdateManyArgs = {
    data: XOR<KambanItemUpdateManyMutationInput, KambanItemUncheckedUpdateManyInput>
    where?: KambanItemWhereInput
  }


  /**
   * KambanItem upsert
   */
  export type KambanItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the KambanItem
    **/
    select?: KambanItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanItemInclude | null
    /**
     * The filter to search for the KambanItem to update in case it exists.
    **/
    where: KambanItemWhereUniqueInput
    /**
     * In case the KambanItem found by the `where` argument doesn't exist, create a new KambanItem with this data.
    **/
    create: XOR<KambanItemCreateInput, KambanItemUncheckedCreateInput>
    /**
     * In case the KambanItem was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<KambanItemUpdateInput, KambanItemUncheckedUpdateInput>
  }


  /**
   * KambanItem delete
   */
  export type KambanItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the KambanItem
    **/
    select?: KambanItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanItemInclude | null
    /**
     * Filter which KambanItem to delete.
    **/
    where: KambanItemWhereUniqueInput
  }


  /**
   * KambanItem deleteMany
   */
  export type KambanItemDeleteManyArgs = {
    where?: KambanItemWhereInput
  }


  /**
   * KambanItem without action
   */
  export type KambanItemArgs = {
    /**
     * Select specific fields to fetch from the KambanItem
    **/
    select?: KambanItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: KambanItemInclude | null
  }



  /**
   * Model Tag
   */


  export type AggregateTag = {
    count: TagCountAggregateOutputType | null
    min: TagMinAggregateOutputType | null
    max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    color: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    color: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    color: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    color?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    color?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    color?: true
    _all?: true
  }

  export type TagAggregateArgs = {
    /**
     * Filter which Tag to aggregate.
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
    **/
    orderBy?: Enumerable<TagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
    [P in keyof T & keyof AggregateTag]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }


    
    
  export type TagGroupByArgs = {
    where?: TagWhereInput
    orderBy?: Enumerable<TagOrderByInput>
    by: Array<TagScalarFieldEnum>
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: TagCountAggregateInputType | true
    min?: TagMinAggregateInputType
    max?: TagMaxAggregateInputType
  }


  export type TagGroupByOutputType = {
    id: string
    name: string
    color: string
    count: TagCountAggregateOutputType | null
    min: TagMinAggregateOutputType | null
    max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Promise<Array<
    PickArray<TagGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof TagGroupByOutputType))]: GetScalarType<T[P], TagGroupByOutputType[P]>
    }
  >>
    

  export type TagSelect = {
    id?: boolean
    name?: boolean
    color?: boolean
    kambanItem?: boolean | KambanItemFindManyArgs
  }

  export type TagInclude = {
    kambanItem?: boolean | KambanItemFindManyArgs
  }

  export type TagGetPayload<
    S extends boolean | null | undefined | TagArgs,
    U = keyof S
      > = S extends true
        ? Tag
    : S extends undefined
    ? never
    : S extends TagArgs | TagFindManyArgs
    ?'include' extends U
    ? Tag  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'kambanItem'
        ? Array < KambanItemGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Tag ?Tag [P]
  : 
          P extends 'kambanItem'
        ? Array < KambanItemGetPayload<S['select'][P]>>  : never
  } 
    : Tag
  : Tag


  type TagCountArgs = Merge<
    Omit<TagFindManyArgs, 'select' | 'include'> & {
      select?: TagCountAggregateInputType | true
    }
  >

  export interface TagDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagFindManyArgs>(
      args?: SelectSubset<T, TagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
    **/
    create<T extends TagCreateArgs>(
      args: SelectSubset<T, TagCreateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Create many Tags.
     *     @param {TagCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tag = await prisma.tag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagCreateManyArgs>(
      args?: SelectSubset<T, TagCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
    **/
    delete<T extends TagDeleteArgs>(
      args: SelectSubset<T, TagDeleteArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagUpdateArgs>(
      args: SelectSubset<T, TagUpdateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagDeleteManyArgs>(
      args?: SelectSubset<T, TagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagUpdateManyArgs>(
      args: SelectSubset<T, TagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
    **/
    upsert<T extends TagUpsertArgs>(
      args: SelectSubset<T, TagUpsertArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TagClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    kambanItem<T extends KambanItemFindManyArgs = {}>(args?: Subset<T, KambanItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<KambanItem>>, PrismaPromise<Array<KambanItemGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * Throw an Error if a Tag can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tag to fetch.
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * Throw an Error if a Tag can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tag to fetch.
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
    **/
    orderBy?: Enumerable<TagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
    **/
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag findMany
   */
  export type TagFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * Filter, which Tags to fetch.
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
    **/
    orderBy?: Enumerable<TagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
    **/
    skip?: number
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag create
   */
  export type TagCreateArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * The data needed to create a Tag.
    **/
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }


  /**
   * Tag createMany
   */
  export type TagCreateManyArgs = {
    data: Enumerable<TagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tag update
   */
  export type TagUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * The data needed to update a Tag.
    **/
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs = {
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    where?: TagWhereInput
  }


  /**
   * Tag upsert
   */
  export type TagUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * The filter to search for the Tag to update in case it exists.
    **/
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
    **/
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }


  /**
   * Tag delete
   */
  export type TagDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
    /**
     * Filter which Tag to delete.
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs = {
    where?: TagWhereInput
  }


  /**
   * Tag without action
   */
  export type TagArgs = {
    /**
     * Select specific fields to fetch from the Tag
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TagInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ProfileScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    street: 'street',
    numberStreet: 'numberStreet',
    neighborhood: 'neighborhood',
    city: 'city',
    state: 'state',
    country: 'country',
    zipcode: 'zipcode',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const KambanScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type KambanScalarFieldEnum = (typeof KambanScalarFieldEnum)[keyof typeof KambanScalarFieldEnum]


  export const KambanColumnScalarFieldEnum: {
    id: 'id',
    name: 'name',
    fatherId: 'fatherId',
    order: 'order',
    createdAt: 'createdAt'
  };

  export type KambanColumnScalarFieldEnum = (typeof KambanColumnScalarFieldEnum)[keyof typeof KambanColumnScalarFieldEnum]


  export const KambanItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    order: 'order',
    columnId: 'columnId',
    tagId: 'tagId',
    createdAt: 'createdAt'
  };

  export type KambanItemScalarFieldEnum = (typeof KambanItemScalarFieldEnum)[keyof typeof KambanItemScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    color: 'color'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    id?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    email?: StringFilter | string
    firstName?: StringNullableFilter | string | null
    lastName?: StringFilter | string
    street?: StringFilter | string
    numberStreet?: IntFilter | number
    neighborhood?: StringFilter | string
    city?: StringFilter | string
    state?: StringFilter | string
    country?: StringFilter | string
    zipcode?: StringFilter | string
    role?: EnumRoleNullableListFilter
    createdAt?: DateTimeFilter | Date | string
  }

  export type ProfileOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    street?: SortOrder
    numberStreet?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zipcode?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type ProfileWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    firstName?: StringNullableWithAggregatesFilter | string | null
    lastName?: StringWithAggregatesFilter | string
    street?: StringWithAggregatesFilter | string
    numberStreet?: IntWithAggregatesFilter | number
    neighborhood?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    country?: StringWithAggregatesFilter | string
    zipcode?: StringWithAggregatesFilter | string
    role?: EnumRoleNullableListFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    kamban?: KambanListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type KambanWhereInput = {
    AND?: Enumerable<KambanWhereInput>
    OR?: Enumerable<KambanWhereInput>
    NOT?: Enumerable<KambanWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    userId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    columns?: KambanColumnListRelationFilter
    createdAt?: DateTimeFilter | Date | string
  }

  export type KambanOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type KambanWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type KambanScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KambanScalarWhereWithAggregatesInput>
    OR?: Enumerable<KambanScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KambanScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type KambanColumnWhereInput = {
    AND?: Enumerable<KambanColumnWhereInput>
    OR?: Enumerable<KambanColumnWhereInput>
    NOT?: Enumerable<KambanColumnWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    KambanFather?: XOR<KambanRelationFilter, KambanWhereInput>
    fatherId?: StringFilter | string
    order?: IntFilter | number
    items?: KambanItemListRelationFilter
    createdAt?: DateTimeFilter | Date | string
  }

  export type KambanColumnOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    fatherId?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type KambanColumnWhereUniqueInput = {
    id?: string
    name?: string
    order?: number
  }

  export type KambanColumnScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KambanColumnScalarWhereWithAggregatesInput>
    OR?: Enumerable<KambanColumnScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KambanColumnScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    fatherId?: StringWithAggregatesFilter | string
    order?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type KambanItemWhereInput = {
    AND?: Enumerable<KambanItemWhereInput>
    OR?: Enumerable<KambanItemWhereInput>
    NOT?: Enumerable<KambanItemWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    order?: IntFilter | number
    column?: XOR<KambanColumnRelationFilter, KambanColumnWhereInput>
    columnId?: StringFilter | string
    tagId?: StringNullableFilter | string | null
    tag?: XOR<TagRelationFilter, TagWhereInput> | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type KambanItemOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
    columnId?: SortOrder
    tagId?: SortOrder
    createdAt?: SortOrder
  }

  export type KambanItemWhereUniqueInput = {
    id?: string
    order?: number
  }

  export type KambanItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KambanItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<KambanItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KambanItemScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    order?: IntWithAggregatesFilter | number
    columnId?: StringWithAggregatesFilter | string
    tagId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TagWhereInput = {
    AND?: Enumerable<TagWhereInput>
    OR?: Enumerable<TagWhereInput>
    NOT?: Enumerable<TagWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    color?: StringFilter | string
    kambanItem?: KambanItemListRelationFilter
  }

  export type TagOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type TagWhereUniqueInput = {
    id?: string
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TagScalarWhereWithAggregatesInput>
    OR?: Enumerable<TagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TagScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    color?: StringWithAggregatesFilter | string
  }

  export type ProfileCreateInput = {
    email: string
    firstName?: string | null
    lastName: string
    street: string
    numberStreet: number
    neighborhood: string
    city: string
    state: string
    country: string
    zipcode: string
    createdAt?: Date | string
    role?: ProfileCreateroleInput | Enumerable<Role>
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id: string
    email: string
    firstName?: string | null
    lastName: string
    street: string
    numberStreet: number
    neighborhood: string
    city: string
    state: string
    country: string
    zipcode: string
    createdAt?: Date | string
    role?: ProfileCreateroleInput | Enumerable<Role>
  }

  export type ProfileUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    numberStreet?: IntFieldUpdateOperationsInput | number
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: ProfileUpdateroleInput | Enumerable<Role>
    user?: UserUpdateOneRequiredWithoutProfileInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    numberStreet?: IntFieldUpdateOperationsInput | number
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: ProfileUpdateroleInput | Enumerable<Role>
  }

  export type ProfileCreateManyInput = {
    id: string
    email: string
    firstName?: string | null
    lastName: string
    street: string
    numberStreet: number
    neighborhood: string
    city: string
    state: string
    country: string
    zipcode: string
    createdAt?: Date | string
    role?: ProfileCreateManyroleInput | Enumerable<Role>
  }

  export type ProfileUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    numberStreet?: IntFieldUpdateOperationsInput | number
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: ProfileUpdateroleInput | Enumerable<Role>
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    numberStreet?: IntFieldUpdateOperationsInput | number
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: ProfileUpdateroleInput | Enumerable<Role>
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    kamban?: KambanCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    kamban?: KambanUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserInput
    kamban?: KambanUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUncheckedUpdateOneWithoutUserInput
    kamban?: KambanUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutKambanInput
    columns?: KambanColumnCreateNestedManyWithoutKambanFatherInput
  }

  export type KambanUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    columns?: KambanColumnUncheckedCreateNestedManyWithoutKambanFatherInput
  }

  export type KambanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutKambanInput
    columns?: KambanColumnUpdateManyWithoutKambanFatherInput
  }

  export type KambanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columns?: KambanColumnUncheckedUpdateManyWithoutKambanFatherInput
  }

  export type KambanCreateManyInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
  }

  export type KambanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanColumnCreateInput = {
    id?: string
    name: string
    order?: number
    createdAt?: Date | string
    KambanFather: KambanCreateNestedOneWithoutColumnsInput
    items?: KambanItemCreateNestedManyWithoutColumnInput
  }

  export type KambanColumnUncheckedCreateInput = {
    id?: string
    name: string
    fatherId: string
    order?: number
    createdAt?: Date | string
    items?: KambanItemUncheckedCreateNestedManyWithoutColumnInput
  }

  export type KambanColumnUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    KambanFather?: KambanUpdateOneRequiredWithoutColumnsInput
    items?: KambanItemUpdateManyWithoutColumnInput
  }

  export type KambanColumnUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: KambanItemUncheckedUpdateManyWithoutColumnInput
  }

  export type KambanColumnCreateManyInput = {
    id?: string
    name: string
    fatherId: string
    order?: number
    createdAt?: Date | string
  }

  export type KambanColumnUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanColumnUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanItemCreateInput = {
    id?: string
    name: string
    description: string
    order?: number
    createdAt?: Date | string
    column: KambanColumnCreateNestedOneWithoutItemsInput
    tag?: TagCreateNestedOneWithoutKambanItemInput
  }

  export type KambanItemUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    order?: number
    columnId: string
    tagId?: string | null
    createdAt?: Date | string
  }

  export type KambanItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    column?: KambanColumnUpdateOneRequiredWithoutItemsInput
    tag?: TagUpdateOneWithoutKambanItemInput
  }

  export type KambanItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    columnId?: StringFieldUpdateOperationsInput | string
    tagId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanItemCreateManyInput = {
    id?: string
    name: string
    description: string
    order?: number
    columnId: string
    tagId?: string | null
    createdAt?: Date | string
  }

  export type KambanItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    columnId?: StringFieldUpdateOperationsInput | string
    tagId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagCreateInput = {
    id?: string
    name: string
    color: string
    kambanItem?: KambanItemCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    color: string
    kambanItem?: KambanItemUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    kambanItem?: KambanItemUpdateManyWithoutTagInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    kambanItem?: KambanItemUncheckedUpdateManyWithoutTagInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    color: string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type EnumRoleNullableListFilter = {
    equals?: Enumerable<Role> | null
    has?: Role | null
    hasEvery?: Enumerable<Role>
    hasSome?: Enumerable<Role>
    isEmpty?: boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    count?: NestedIntNullableFilter
    min?: NestedStringNullableFilter
    max?: NestedStringNullableFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    count?: NestedIntFilter
    min?: NestedDateTimeFilter
    max?: NestedDateTimeFilter
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type KambanListRelationFilter = {
    every?: KambanWhereInput
    some?: KambanWhereInput
    none?: KambanWhereInput
  }

  export type KambanColumnListRelationFilter = {
    every?: KambanColumnWhereInput
    some?: KambanColumnWhereInput
    none?: KambanColumnWhereInput
  }

  export type KambanRelationFilter = {
    is?: KambanWhereInput
    isNot?: KambanWhereInput
  }

  export type KambanItemListRelationFilter = {
    every?: KambanItemWhereInput
    some?: KambanItemWhereInput
    none?: KambanItemWhereInput
  }

  export type KambanColumnRelationFilter = {
    is?: KambanColumnWhereInput
    isNot?: KambanColumnWhereInput
  }

  export type TagRelationFilter = {
    is?: TagWhereInput | null
    isNot?: TagWhereInput | null
  }

  export type ProfileCreateroleInput = {
    set: Enumerable<Role>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProfileUpdateroleInput = {
    set?: Enumerable<Role>
    push?: Role
  }

  export type UserUpdateOneRequiredWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type ProfileCreateManyroleInput = {
    set: Enumerable<Role>
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type KambanCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<KambanCreateWithoutUserInput>, Enumerable<KambanUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KambanCreateOrConnectWithoutUserInput>
    createMany?: KambanCreateManyUserInputEnvelope
    connect?: Enumerable<KambanWhereUniqueInput>
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type KambanUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<KambanCreateWithoutUserInput>, Enumerable<KambanUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KambanCreateOrConnectWithoutUserInput>
    createMany?: KambanCreateManyUserInputEnvelope
    connect?: Enumerable<KambanWhereUniqueInput>
  }

  export type ProfileUpdateOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    connect?: ProfileWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type KambanUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<KambanCreateWithoutUserInput>, Enumerable<KambanUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KambanCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<KambanUpsertWithWhereUniqueWithoutUserInput>
    createMany?: KambanCreateManyUserInputEnvelope
    connect?: Enumerable<KambanWhereUniqueInput>
    set?: Enumerable<KambanWhereUniqueInput>
    disconnect?: Enumerable<KambanWhereUniqueInput>
    delete?: Enumerable<KambanWhereUniqueInput>
    update?: Enumerable<KambanUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<KambanUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<KambanScalarWhereInput>
  }

  export type ProfileUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    connect?: ProfileWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type KambanUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<KambanCreateWithoutUserInput>, Enumerable<KambanUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<KambanCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<KambanUpsertWithWhereUniqueWithoutUserInput>
    createMany?: KambanCreateManyUserInputEnvelope
    connect?: Enumerable<KambanWhereUniqueInput>
    set?: Enumerable<KambanWhereUniqueInput>
    disconnect?: Enumerable<KambanWhereUniqueInput>
    delete?: Enumerable<KambanWhereUniqueInput>
    update?: Enumerable<KambanUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<KambanUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<KambanScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutKambanInput = {
    create?: XOR<UserCreateWithoutKambanInput, UserUncheckedCreateWithoutKambanInput>
    connectOrCreate?: UserCreateOrConnectWithoutKambanInput
    connect?: UserWhereUniqueInput
  }

  export type KambanColumnCreateNestedManyWithoutKambanFatherInput = {
    create?: XOR<Enumerable<KambanColumnCreateWithoutKambanFatherInput>, Enumerable<KambanColumnUncheckedCreateWithoutKambanFatherInput>>
    connectOrCreate?: Enumerable<KambanColumnCreateOrConnectWithoutKambanFatherInput>
    createMany?: KambanColumnCreateManyKambanFatherInputEnvelope
    connect?: Enumerable<KambanColumnWhereUniqueInput>
  }

  export type KambanColumnUncheckedCreateNestedManyWithoutKambanFatherInput = {
    create?: XOR<Enumerable<KambanColumnCreateWithoutKambanFatherInput>, Enumerable<KambanColumnUncheckedCreateWithoutKambanFatherInput>>
    connectOrCreate?: Enumerable<KambanColumnCreateOrConnectWithoutKambanFatherInput>
    createMany?: KambanColumnCreateManyKambanFatherInputEnvelope
    connect?: Enumerable<KambanColumnWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutKambanInput = {
    create?: XOR<UserCreateWithoutKambanInput, UserUncheckedCreateWithoutKambanInput>
    connectOrCreate?: UserCreateOrConnectWithoutKambanInput
    upsert?: UserUpsertWithoutKambanInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutKambanInput, UserUncheckedUpdateWithoutKambanInput>
  }

  export type KambanColumnUpdateManyWithoutKambanFatherInput = {
    create?: XOR<Enumerable<KambanColumnCreateWithoutKambanFatherInput>, Enumerable<KambanColumnUncheckedCreateWithoutKambanFatherInput>>
    connectOrCreate?: Enumerable<KambanColumnCreateOrConnectWithoutKambanFatherInput>
    upsert?: Enumerable<KambanColumnUpsertWithWhereUniqueWithoutKambanFatherInput>
    createMany?: KambanColumnCreateManyKambanFatherInputEnvelope
    connect?: Enumerable<KambanColumnWhereUniqueInput>
    set?: Enumerable<KambanColumnWhereUniqueInput>
    disconnect?: Enumerable<KambanColumnWhereUniqueInput>
    delete?: Enumerable<KambanColumnWhereUniqueInput>
    update?: Enumerable<KambanColumnUpdateWithWhereUniqueWithoutKambanFatherInput>
    updateMany?: Enumerable<KambanColumnUpdateManyWithWhereWithoutKambanFatherInput>
    deleteMany?: Enumerable<KambanColumnScalarWhereInput>
  }

  export type KambanColumnUncheckedUpdateManyWithoutKambanFatherInput = {
    create?: XOR<Enumerable<KambanColumnCreateWithoutKambanFatherInput>, Enumerable<KambanColumnUncheckedCreateWithoutKambanFatherInput>>
    connectOrCreate?: Enumerable<KambanColumnCreateOrConnectWithoutKambanFatherInput>
    upsert?: Enumerable<KambanColumnUpsertWithWhereUniqueWithoutKambanFatherInput>
    createMany?: KambanColumnCreateManyKambanFatherInputEnvelope
    connect?: Enumerable<KambanColumnWhereUniqueInput>
    set?: Enumerable<KambanColumnWhereUniqueInput>
    disconnect?: Enumerable<KambanColumnWhereUniqueInput>
    delete?: Enumerable<KambanColumnWhereUniqueInput>
    update?: Enumerable<KambanColumnUpdateWithWhereUniqueWithoutKambanFatherInput>
    updateMany?: Enumerable<KambanColumnUpdateManyWithWhereWithoutKambanFatherInput>
    deleteMany?: Enumerable<KambanColumnScalarWhereInput>
  }

  export type KambanCreateNestedOneWithoutColumnsInput = {
    create?: XOR<KambanCreateWithoutColumnsInput, KambanUncheckedCreateWithoutColumnsInput>
    connectOrCreate?: KambanCreateOrConnectWithoutColumnsInput
    connect?: KambanWhereUniqueInput
  }

  export type KambanItemCreateNestedManyWithoutColumnInput = {
    create?: XOR<Enumerable<KambanItemCreateWithoutColumnInput>, Enumerable<KambanItemUncheckedCreateWithoutColumnInput>>
    connectOrCreate?: Enumerable<KambanItemCreateOrConnectWithoutColumnInput>
    createMany?: KambanItemCreateManyColumnInputEnvelope
    connect?: Enumerable<KambanItemWhereUniqueInput>
  }

  export type KambanItemUncheckedCreateNestedManyWithoutColumnInput = {
    create?: XOR<Enumerable<KambanItemCreateWithoutColumnInput>, Enumerable<KambanItemUncheckedCreateWithoutColumnInput>>
    connectOrCreate?: Enumerable<KambanItemCreateOrConnectWithoutColumnInput>
    createMany?: KambanItemCreateManyColumnInputEnvelope
    connect?: Enumerable<KambanItemWhereUniqueInput>
  }

  export type KambanUpdateOneRequiredWithoutColumnsInput = {
    create?: XOR<KambanCreateWithoutColumnsInput, KambanUncheckedCreateWithoutColumnsInput>
    connectOrCreate?: KambanCreateOrConnectWithoutColumnsInput
    upsert?: KambanUpsertWithoutColumnsInput
    connect?: KambanWhereUniqueInput
    update?: XOR<KambanUpdateWithoutColumnsInput, KambanUncheckedUpdateWithoutColumnsInput>
  }

  export type KambanItemUpdateManyWithoutColumnInput = {
    create?: XOR<Enumerable<KambanItemCreateWithoutColumnInput>, Enumerable<KambanItemUncheckedCreateWithoutColumnInput>>
    connectOrCreate?: Enumerable<KambanItemCreateOrConnectWithoutColumnInput>
    upsert?: Enumerable<KambanItemUpsertWithWhereUniqueWithoutColumnInput>
    createMany?: KambanItemCreateManyColumnInputEnvelope
    connect?: Enumerable<KambanItemWhereUniqueInput>
    set?: Enumerable<KambanItemWhereUniqueInput>
    disconnect?: Enumerable<KambanItemWhereUniqueInput>
    delete?: Enumerable<KambanItemWhereUniqueInput>
    update?: Enumerable<KambanItemUpdateWithWhereUniqueWithoutColumnInput>
    updateMany?: Enumerable<KambanItemUpdateManyWithWhereWithoutColumnInput>
    deleteMany?: Enumerable<KambanItemScalarWhereInput>
  }

  export type KambanItemUncheckedUpdateManyWithoutColumnInput = {
    create?: XOR<Enumerable<KambanItemCreateWithoutColumnInput>, Enumerable<KambanItemUncheckedCreateWithoutColumnInput>>
    connectOrCreate?: Enumerable<KambanItemCreateOrConnectWithoutColumnInput>
    upsert?: Enumerable<KambanItemUpsertWithWhereUniqueWithoutColumnInput>
    createMany?: KambanItemCreateManyColumnInputEnvelope
    connect?: Enumerable<KambanItemWhereUniqueInput>
    set?: Enumerable<KambanItemWhereUniqueInput>
    disconnect?: Enumerable<KambanItemWhereUniqueInput>
    delete?: Enumerable<KambanItemWhereUniqueInput>
    update?: Enumerable<KambanItemUpdateWithWhereUniqueWithoutColumnInput>
    updateMany?: Enumerable<KambanItemUpdateManyWithWhereWithoutColumnInput>
    deleteMany?: Enumerable<KambanItemScalarWhereInput>
  }

  export type KambanColumnCreateNestedOneWithoutItemsInput = {
    create?: XOR<KambanColumnCreateWithoutItemsInput, KambanColumnUncheckedCreateWithoutItemsInput>
    connectOrCreate?: KambanColumnCreateOrConnectWithoutItemsInput
    connect?: KambanColumnWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutKambanItemInput = {
    create?: XOR<TagCreateWithoutKambanItemInput, TagUncheckedCreateWithoutKambanItemInput>
    connectOrCreate?: TagCreateOrConnectWithoutKambanItemInput
    connect?: TagWhereUniqueInput
  }

  export type KambanColumnUpdateOneRequiredWithoutItemsInput = {
    create?: XOR<KambanColumnCreateWithoutItemsInput, KambanColumnUncheckedCreateWithoutItemsInput>
    connectOrCreate?: KambanColumnCreateOrConnectWithoutItemsInput
    upsert?: KambanColumnUpsertWithoutItemsInput
    connect?: KambanColumnWhereUniqueInput
    update?: XOR<KambanColumnUpdateWithoutItemsInput, KambanColumnUncheckedUpdateWithoutItemsInput>
  }

  export type TagUpdateOneWithoutKambanItemInput = {
    create?: XOR<TagCreateWithoutKambanItemInput, TagUncheckedCreateWithoutKambanItemInput>
    connectOrCreate?: TagCreateOrConnectWithoutKambanItemInput
    upsert?: TagUpsertWithoutKambanItemInput
    connect?: TagWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<TagUpdateWithoutKambanItemInput, TagUncheckedUpdateWithoutKambanItemInput>
  }

  export type KambanItemCreateNestedManyWithoutTagInput = {
    create?: XOR<Enumerable<KambanItemCreateWithoutTagInput>, Enumerable<KambanItemUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<KambanItemCreateOrConnectWithoutTagInput>
    createMany?: KambanItemCreateManyTagInputEnvelope
    connect?: Enumerable<KambanItemWhereUniqueInput>
  }

  export type KambanItemUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<Enumerable<KambanItemCreateWithoutTagInput>, Enumerable<KambanItemUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<KambanItemCreateOrConnectWithoutTagInput>
    createMany?: KambanItemCreateManyTagInputEnvelope
    connect?: Enumerable<KambanItemWhereUniqueInput>
  }

  export type KambanItemUpdateManyWithoutTagInput = {
    create?: XOR<Enumerable<KambanItemCreateWithoutTagInput>, Enumerable<KambanItemUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<KambanItemCreateOrConnectWithoutTagInput>
    upsert?: Enumerable<KambanItemUpsertWithWhereUniqueWithoutTagInput>
    createMany?: KambanItemCreateManyTagInputEnvelope
    connect?: Enumerable<KambanItemWhereUniqueInput>
    set?: Enumerable<KambanItemWhereUniqueInput>
    disconnect?: Enumerable<KambanItemWhereUniqueInput>
    delete?: Enumerable<KambanItemWhereUniqueInput>
    update?: Enumerable<KambanItemUpdateWithWhereUniqueWithoutTagInput>
    updateMany?: Enumerable<KambanItemUpdateManyWithWhereWithoutTagInput>
    deleteMany?: Enumerable<KambanItemScalarWhereInput>
  }

  export type KambanItemUncheckedUpdateManyWithoutTagInput = {
    create?: XOR<Enumerable<KambanItemCreateWithoutTagInput>, Enumerable<KambanItemUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<KambanItemCreateOrConnectWithoutTagInput>
    upsert?: Enumerable<KambanItemUpsertWithWhereUniqueWithoutTagInput>
    createMany?: KambanItemCreateManyTagInputEnvelope
    connect?: Enumerable<KambanItemWhereUniqueInput>
    set?: Enumerable<KambanItemWhereUniqueInput>
    disconnect?: Enumerable<KambanItemWhereUniqueInput>
    delete?: Enumerable<KambanItemWhereUniqueInput>
    update?: Enumerable<KambanItemUpdateWithWhereUniqueWithoutTagInput>
    updateMany?: Enumerable<KambanItemUpdateManyWithWhereWithoutTagInput>
    deleteMany?: Enumerable<KambanItemScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    count?: NestedIntNullableFilter
    min?: NestedStringNullableFilter
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    count?: NestedIntFilter
    min?: NestedDateTimeFilter
    max?: NestedDateTimeFilter
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    kamban?: KambanCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    kamban?: KambanUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kamban?: KambanUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kamban?: KambanUncheckedUpdateManyWithoutUserInput
  }

  export type ProfileCreateWithoutUserInput = {
    email: string
    firstName?: string | null
    lastName: string
    street: string
    numberStreet: number
    neighborhood: string
    city: string
    state: string
    country: string
    zipcode: string
    createdAt?: Date | string
    role?: ProfileCreateroleInput | Enumerable<Role>
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    email: string
    firstName?: string | null
    lastName: string
    street: string
    numberStreet: number
    neighborhood: string
    city: string
    state: string
    country: string
    zipcode: string
    createdAt?: Date | string
    role?: ProfileCreateroleInput | Enumerable<Role>
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type KambanCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    columns?: KambanColumnCreateNestedManyWithoutKambanFatherInput
  }

  export type KambanUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    columns?: KambanColumnUncheckedCreateNestedManyWithoutKambanFatherInput
  }

  export type KambanCreateOrConnectWithoutUserInput = {
    where: KambanWhereUniqueInput
    create: XOR<KambanCreateWithoutUserInput, KambanUncheckedCreateWithoutUserInput>
  }

  export type KambanCreateManyUserInputEnvelope = {
    data: Enumerable<KambanCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    numberStreet?: IntFieldUpdateOperationsInput | number
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: ProfileUpdateroleInput | Enumerable<Role>
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    numberStreet?: IntFieldUpdateOperationsInput | number
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: ProfileUpdateroleInput | Enumerable<Role>
  }

  export type KambanUpsertWithWhereUniqueWithoutUserInput = {
    where: KambanWhereUniqueInput
    update: XOR<KambanUpdateWithoutUserInput, KambanUncheckedUpdateWithoutUserInput>
    create: XOR<KambanCreateWithoutUserInput, KambanUncheckedCreateWithoutUserInput>
  }

  export type KambanUpdateWithWhereUniqueWithoutUserInput = {
    where: KambanWhereUniqueInput
    data: XOR<KambanUpdateWithoutUserInput, KambanUncheckedUpdateWithoutUserInput>
  }

  export type KambanUpdateManyWithWhereWithoutUserInput = {
    where: KambanScalarWhereInput
    data: XOR<KambanUpdateManyMutationInput, KambanUncheckedUpdateManyWithoutKambanInput>
  }

  export type KambanScalarWhereInput = {
    AND?: Enumerable<KambanScalarWhereInput>
    OR?: Enumerable<KambanScalarWhereInput>
    NOT?: Enumerable<KambanScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutKambanInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutKambanInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutKambanInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKambanInput, UserUncheckedCreateWithoutKambanInput>
  }

  export type KambanColumnCreateWithoutKambanFatherInput = {
    id?: string
    name: string
    order?: number
    createdAt?: Date | string
    items?: KambanItemCreateNestedManyWithoutColumnInput
  }

  export type KambanColumnUncheckedCreateWithoutKambanFatherInput = {
    id?: string
    name: string
    order?: number
    createdAt?: Date | string
    items?: KambanItemUncheckedCreateNestedManyWithoutColumnInput
  }

  export type KambanColumnCreateOrConnectWithoutKambanFatherInput = {
    where: KambanColumnWhereUniqueInput
    create: XOR<KambanColumnCreateWithoutKambanFatherInput, KambanColumnUncheckedCreateWithoutKambanFatherInput>
  }

  export type KambanColumnCreateManyKambanFatherInputEnvelope = {
    data: Enumerable<KambanColumnCreateManyKambanFatherInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutKambanInput = {
    update: XOR<UserUpdateWithoutKambanInput, UserUncheckedUpdateWithoutKambanInput>
    create: XOR<UserCreateWithoutKambanInput, UserUncheckedCreateWithoutKambanInput>
  }

  export type UserUpdateWithoutKambanInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutKambanInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUncheckedUpdateOneWithoutUserInput
  }

  export type KambanColumnUpsertWithWhereUniqueWithoutKambanFatherInput = {
    where: KambanColumnWhereUniqueInput
    update: XOR<KambanColumnUpdateWithoutKambanFatherInput, KambanColumnUncheckedUpdateWithoutKambanFatherInput>
    create: XOR<KambanColumnCreateWithoutKambanFatherInput, KambanColumnUncheckedCreateWithoutKambanFatherInput>
  }

  export type KambanColumnUpdateWithWhereUniqueWithoutKambanFatherInput = {
    where: KambanColumnWhereUniqueInput
    data: XOR<KambanColumnUpdateWithoutKambanFatherInput, KambanColumnUncheckedUpdateWithoutKambanFatherInput>
  }

  export type KambanColumnUpdateManyWithWhereWithoutKambanFatherInput = {
    where: KambanColumnScalarWhereInput
    data: XOR<KambanColumnUpdateManyMutationInput, KambanColumnUncheckedUpdateManyWithoutColumnsInput>
  }

  export type KambanColumnScalarWhereInput = {
    AND?: Enumerable<KambanColumnScalarWhereInput>
    OR?: Enumerable<KambanColumnScalarWhereInput>
    NOT?: Enumerable<KambanColumnScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    fatherId?: StringFilter | string
    order?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
  }

  export type KambanCreateWithoutColumnsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutKambanInput
  }

  export type KambanUncheckedCreateWithoutColumnsInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
  }

  export type KambanCreateOrConnectWithoutColumnsInput = {
    where: KambanWhereUniqueInput
    create: XOR<KambanCreateWithoutColumnsInput, KambanUncheckedCreateWithoutColumnsInput>
  }

  export type KambanItemCreateWithoutColumnInput = {
    id?: string
    name: string
    description: string
    order?: number
    createdAt?: Date | string
    tag?: TagCreateNestedOneWithoutKambanItemInput
  }

  export type KambanItemUncheckedCreateWithoutColumnInput = {
    id?: string
    name: string
    description: string
    order?: number
    tagId?: string | null
    createdAt?: Date | string
  }

  export type KambanItemCreateOrConnectWithoutColumnInput = {
    where: KambanItemWhereUniqueInput
    create: XOR<KambanItemCreateWithoutColumnInput, KambanItemUncheckedCreateWithoutColumnInput>
  }

  export type KambanItemCreateManyColumnInputEnvelope = {
    data: Enumerable<KambanItemCreateManyColumnInput>
    skipDuplicates?: boolean
  }

  export type KambanUpsertWithoutColumnsInput = {
    update: XOR<KambanUpdateWithoutColumnsInput, KambanUncheckedUpdateWithoutColumnsInput>
    create: XOR<KambanCreateWithoutColumnsInput, KambanUncheckedCreateWithoutColumnsInput>
  }

  export type KambanUpdateWithoutColumnsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutKambanInput
  }

  export type KambanUncheckedUpdateWithoutColumnsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanItemUpsertWithWhereUniqueWithoutColumnInput = {
    where: KambanItemWhereUniqueInput
    update: XOR<KambanItemUpdateWithoutColumnInput, KambanItemUncheckedUpdateWithoutColumnInput>
    create: XOR<KambanItemCreateWithoutColumnInput, KambanItemUncheckedCreateWithoutColumnInput>
  }

  export type KambanItemUpdateWithWhereUniqueWithoutColumnInput = {
    where: KambanItemWhereUniqueInput
    data: XOR<KambanItemUpdateWithoutColumnInput, KambanItemUncheckedUpdateWithoutColumnInput>
  }

  export type KambanItemUpdateManyWithWhereWithoutColumnInput = {
    where: KambanItemScalarWhereInput
    data: XOR<KambanItemUpdateManyMutationInput, KambanItemUncheckedUpdateManyWithoutItemsInput>
  }

  export type KambanItemScalarWhereInput = {
    AND?: Enumerable<KambanItemScalarWhereInput>
    OR?: Enumerable<KambanItemScalarWhereInput>
    NOT?: Enumerable<KambanItemScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    order?: IntFilter | number
    columnId?: StringFilter | string
    tagId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type KambanColumnCreateWithoutItemsInput = {
    id?: string
    name: string
    order?: number
    createdAt?: Date | string
    KambanFather: KambanCreateNestedOneWithoutColumnsInput
  }

  export type KambanColumnUncheckedCreateWithoutItemsInput = {
    id?: string
    name: string
    fatherId: string
    order?: number
    createdAt?: Date | string
  }

  export type KambanColumnCreateOrConnectWithoutItemsInput = {
    where: KambanColumnWhereUniqueInput
    create: XOR<KambanColumnCreateWithoutItemsInput, KambanColumnUncheckedCreateWithoutItemsInput>
  }

  export type TagCreateWithoutKambanItemInput = {
    id?: string
    name: string
    color: string
  }

  export type TagUncheckedCreateWithoutKambanItemInput = {
    id?: string
    name: string
    color: string
  }

  export type TagCreateOrConnectWithoutKambanItemInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutKambanItemInput, TagUncheckedCreateWithoutKambanItemInput>
  }

  export type KambanColumnUpsertWithoutItemsInput = {
    update: XOR<KambanColumnUpdateWithoutItemsInput, KambanColumnUncheckedUpdateWithoutItemsInput>
    create: XOR<KambanColumnCreateWithoutItemsInput, KambanColumnUncheckedCreateWithoutItemsInput>
  }

  export type KambanColumnUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    KambanFather?: KambanUpdateOneRequiredWithoutColumnsInput
  }

  export type KambanColumnUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUpsertWithoutKambanItemInput = {
    update: XOR<TagUpdateWithoutKambanItemInput, TagUncheckedUpdateWithoutKambanItemInput>
    create: XOR<TagCreateWithoutKambanItemInput, TagUncheckedCreateWithoutKambanItemInput>
  }

  export type TagUpdateWithoutKambanItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateWithoutKambanItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type KambanItemCreateWithoutTagInput = {
    id?: string
    name: string
    description: string
    order?: number
    createdAt?: Date | string
    column: KambanColumnCreateNestedOneWithoutItemsInput
  }

  export type KambanItemUncheckedCreateWithoutTagInput = {
    id?: string
    name: string
    description: string
    order?: number
    columnId: string
    createdAt?: Date | string
  }

  export type KambanItemCreateOrConnectWithoutTagInput = {
    where: KambanItemWhereUniqueInput
    create: XOR<KambanItemCreateWithoutTagInput, KambanItemUncheckedCreateWithoutTagInput>
  }

  export type KambanItemCreateManyTagInputEnvelope = {
    data: Enumerable<KambanItemCreateManyTagInput>
    skipDuplicates?: boolean
  }

  export type KambanItemUpsertWithWhereUniqueWithoutTagInput = {
    where: KambanItemWhereUniqueInput
    update: XOR<KambanItemUpdateWithoutTagInput, KambanItemUncheckedUpdateWithoutTagInput>
    create: XOR<KambanItemCreateWithoutTagInput, KambanItemUncheckedCreateWithoutTagInput>
  }

  export type KambanItemUpdateWithWhereUniqueWithoutTagInput = {
    where: KambanItemWhereUniqueInput
    data: XOR<KambanItemUpdateWithoutTagInput, KambanItemUncheckedUpdateWithoutTagInput>
  }

  export type KambanItemUpdateManyWithWhereWithoutTagInput = {
    where: KambanItemScalarWhereInput
    data: XOR<KambanItemUpdateManyMutationInput, KambanItemUncheckedUpdateManyWithoutKambanItemInput>
  }

  export type KambanCreateManyUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
  }

  export type KambanUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columns?: KambanColumnUpdateManyWithoutKambanFatherInput
  }

  export type KambanUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columns?: KambanColumnUncheckedUpdateManyWithoutKambanFatherInput
  }

  export type KambanUncheckedUpdateManyWithoutKambanInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanColumnCreateManyKambanFatherInput = {
    id?: string
    name: string
    order?: number
    createdAt?: Date | string
  }

  export type KambanColumnUpdateWithoutKambanFatherInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: KambanItemUpdateManyWithoutColumnInput
  }

  export type KambanColumnUncheckedUpdateWithoutKambanFatherInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: KambanItemUncheckedUpdateManyWithoutColumnInput
  }

  export type KambanColumnUncheckedUpdateManyWithoutColumnsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanItemCreateManyColumnInput = {
    id?: string
    name: string
    description: string
    order?: number
    tagId?: string | null
    createdAt?: Date | string
  }

  export type KambanItemUpdateWithoutColumnInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: TagUpdateOneWithoutKambanItemInput
  }

  export type KambanItemUncheckedUpdateWithoutColumnInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    tagId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanItemUncheckedUpdateManyWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    tagId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanItemCreateManyTagInput = {
    id?: string
    name: string
    description: string
    order?: number
    columnId: string
    createdAt?: Date | string
  }

  export type KambanItemUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    column?: KambanColumnUpdateOneRequiredWithoutItemsInput
  }

  export type KambanItemUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    columnId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KambanItemUncheckedUpdateManyWithoutKambanItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    columnId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}